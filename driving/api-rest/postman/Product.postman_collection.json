{
	"info": {
		"_postman_id": "2467b06a-1505-47e4-a782-f3fe3d4132f3",
		"name": "Product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42897970"
	},
	"item": [
		{
			"name": "localhost:9090/v1/products/sort Case 70/30",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response contains correct data\", function () {",
							"    ",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.products).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"products\");",
							"    pm.expect(jsonData).to.have.property(\"appliedCriteria\");",
							"    pm.expect(jsonData).to.have.property(\"totalProducts\");",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.totalProducts).to.equal(jsonData.products.length);",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        pm.expect(product, `Product ${index} should have id`).to.have.property(\"id\");",
							"        pm.expect(product, `Product ${index} should have name`).to.have.property(\"name\");",
							"        pm.expect(product, `Product ${index} should have salesUnits`).to.have.property(\"salesUnits\");",
							"        pm.expect(product, `Product ${index} should have stockBySizes`).to.have.property(\"stockBySizes\");",
							"        pm.expect(product, `Product ${index} should have stockRatio`).to.have.property(\"stockRatio\");",
							"        ",
							"        // Verificar tipos de datos",
							"        pm.expect(product.id, `Product ${index} id should be number`).to.be.a(\"number\");",
							"        pm.expect(product.name, `Product ${index} name should be string`).to.be.a(\"string\");",
							"        pm.expect(product.salesUnits, `Product ${index} salesUnits should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockBySizes, `Product ${index} stockBySizes should be object`).to.be.an(\"object\");",
							"    });",
							"});",
							"",
							"pm.test(\"Stock data is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        const stockBySizes = product.stockBySizes;",
							"        ",
							"        // Verificar que stockBySizes tiene las tallas esperadas",
							"        pm.expect(stockBySizes, `Product ${index} should have size M`).to.have.property(\"M \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size L`).to.have.property(\"L \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size S`).to.have.property(\"S \");",
							"        ",
							"        // Verificar que las cantidades son números no negativos",
							"        Object.keys(stockBySizes).forEach(function(size) {",
							"            pm.expect(stockBySizes[size], `Product ${index} size ${size} should be non-negative number`)",
							"                .to.be.a(\"number\").and.to.be.at.least(0);",
							"        });",
							"        ",
							"        // Verificar que stockRatio está entre 0 y 1",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be between 0 and 1`)",
							"            .to.be.at.least(0).and.to.be.at.most(1);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"criteria\": {\n    \"weights\": {\n      \"sales_units\": 0.7,\n      \"stock_ratio\": 0.3\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9090/v1/products/sort",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"v1",
						"products",
						"sort"
					]
				},
				"description": "Caso Test 1"
			},
			"response": []
		},
		{
			"name": "localhost:9090/v1/products/sort Case 50/50",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response contains correct data\", function () {",
							"    ",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.products).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"products\");",
							"    pm.expect(jsonData).to.have.property(\"appliedCriteria\");",
							"    pm.expect(jsonData).to.have.property(\"totalProducts\");",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.totalProducts).to.equal(jsonData.products.length);",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        pm.expect(product, `Product ${index} should have id`).to.have.property(\"id\");",
							"        pm.expect(product, `Product ${index} should have name`).to.have.property(\"name\");",
							"        pm.expect(product, `Product ${index} should have salesUnits`).to.have.property(\"salesUnits\");",
							"        pm.expect(product, `Product ${index} should have stockBySizes`).to.have.property(\"stockBySizes\");",
							"        pm.expect(product, `Product ${index} should have stockRatio`).to.have.property(\"stockRatio\");",
							"        ",
							"        // Verificar tipos de datos",
							"        pm.expect(product.id, `Product ${index} id should be number`).to.be.a(\"number\");",
							"        pm.expect(product.name, `Product ${index} name should be string`).to.be.a(\"string\");",
							"        pm.expect(product.salesUnits, `Product ${index} salesUnits should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockBySizes, `Product ${index} stockBySizes should be object`).to.be.an(\"object\");",
							"    });",
							"});",
							"",
							"pm.test(\"Stock data is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        const stockBySizes = product.stockBySizes;",
							"        ",
							"        // Verificar que stockBySizes tiene las tallas esperadas",
							"        pm.expect(stockBySizes, `Product ${index} should have size M`).to.have.property(\"M \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size L`).to.have.property(\"L \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size S`).to.have.property(\"S \");",
							"        ",
							"        // Verificar que las cantidades son números no negativos",
							"        Object.keys(stockBySizes).forEach(function(size) {",
							"            pm.expect(stockBySizes[size], `Product ${index} size ${size} should be non-negative number`)",
							"                .to.be.a(\"number\").and.to.be.at.least(0);",
							"        });",
							"        ",
							"        // Verificar que stockRatio está entre 0 y 1",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be between 0 and 1`)",
							"            .to.be.at.least(0).and.to.be.at.most(1);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"criteria\": {\n    \"weights\": {\n      \"sales_units\": 0.5,\n      \"stock_ratio\": 0.5\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9090/v1/products/sort",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"v1",
						"products",
						"sort"
					]
				},
				"description": "Caso Test 1"
			},
			"response": []
		},
		{
			"name": "localhost:9090/v1/products/sort Case Only Sales",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response contains correct data\", function () {",
							"    ",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.products).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"products\");",
							"    pm.expect(jsonData).to.have.property(\"appliedCriteria\");",
							"    pm.expect(jsonData).to.have.property(\"totalProducts\");",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.totalProducts).to.equal(jsonData.products.length);",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        pm.expect(product, `Product ${index} should have id`).to.have.property(\"id\");",
							"        pm.expect(product, `Product ${index} should have name`).to.have.property(\"name\");",
							"        pm.expect(product, `Product ${index} should have salesUnits`).to.have.property(\"salesUnits\");",
							"        pm.expect(product, `Product ${index} should have stockBySizes`).to.have.property(\"stockBySizes\");",
							"        pm.expect(product, `Product ${index} should have stockRatio`).to.have.property(\"stockRatio\");",
							"        ",
							"        // Verificar tipos de datos",
							"        pm.expect(product.id, `Product ${index} id should be number`).to.be.a(\"number\");",
							"        pm.expect(product.name, `Product ${index} name should be string`).to.be.a(\"string\");",
							"        pm.expect(product.salesUnits, `Product ${index} salesUnits should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockBySizes, `Product ${index} stockBySizes should be object`).to.be.an(\"object\");",
							"    });",
							"});",
							"",
							"pm.test(\"Stock data is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        const stockBySizes = product.stockBySizes;",
							"        ",
							"        // Verificar que stockBySizes tiene las tallas esperadas",
							"        pm.expect(stockBySizes, `Product ${index} should have size M`).to.have.property(\"M \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size L`).to.have.property(\"L \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size S`).to.have.property(\"S \");",
							"        ",
							"        // Verificar que las cantidades son números no negativos",
							"        Object.keys(stockBySizes).forEach(function(size) {",
							"            pm.expect(stockBySizes[size], `Product ${index} size ${size} should be non-negative number`)",
							"                .to.be.a(\"number\").and.to.be.at.least(0);",
							"        });",
							"        ",
							"        // Verificar que stockRatio está entre 0 y 1",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be between 0 and 1`)",
							"            .to.be.at.least(0).and.to.be.at.most(1);",
							"    });",
							"});",
							"",
							"pm.test(\"When sales weight is 1.0, products should be ordered by sales\", function () {",
							"    const requestData = JSON.parse(pm.request.body.raw);",
							"    ",
							"    if (requestData.criteria.weights.sales_units === 1.0 && ",
							"        requestData.criteria.weights.stock_ratio === 0.0) {",
							"        ",
							"        const jsonData = pm.response.json();",
							"        const products = jsonData.products;",
							"        ",
							"        for (let i = 0; i < products.length - 1; i++) {",
							"            pm.expect(products[i].salesUnits, `Product ${i} should have higher sales than product ${i+1}`)",
							"                .to.be.at.least(products[i + 1].salesUnits);",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"criteria\": {\n    \"weights\": {\n      \"sales_units\": 1.0,\n      \"stock_ratio\": 0.0\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9090/v1/products/sort",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"v1",
						"products",
						"sort"
					]
				},
				"description": "Caso Test 1"
			},
			"response": []
		},
		{
			"name": "localhost:9090/v1/products/sort Case Only Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response contains correct data\", function () {",
							"    ",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.products).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"products\");",
							"    pm.expect(jsonData).to.have.property(\"appliedCriteria\");",
							"    pm.expect(jsonData).to.have.property(\"totalProducts\");",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.totalProducts).to.equal(jsonData.products.length);",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        pm.expect(product, `Product ${index} should have id`).to.have.property(\"id\");",
							"        pm.expect(product, `Product ${index} should have name`).to.have.property(\"name\");",
							"        pm.expect(product, `Product ${index} should have salesUnits`).to.have.property(\"salesUnits\");",
							"        pm.expect(product, `Product ${index} should have stockBySizes`).to.have.property(\"stockBySizes\");",
							"        pm.expect(product, `Product ${index} should have stockRatio`).to.have.property(\"stockRatio\");",
							"        ",
							"        // Verificar tipos de datos",
							"        pm.expect(product.id, `Product ${index} id should be number`).to.be.a(\"number\");",
							"        pm.expect(product.name, `Product ${index} name should be string`).to.be.a(\"string\");",
							"        pm.expect(product.salesUnits, `Product ${index} salesUnits should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be number`).to.be.a(\"number\");",
							"        pm.expect(product.stockBySizes, `Product ${index} stockBySizes should be object`).to.be.an(\"object\");",
							"    });",
							"});",
							"",
							"pm.test(\"Stock data is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    jsonData.products.forEach(function(product, index) {",
							"        const stockBySizes = product.stockBySizes;",
							"        ",
							"        // Verificar que stockBySizes tiene las tallas esperadas",
							"        pm.expect(stockBySizes, `Product ${index} should have size M`).to.have.property(\"M \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size L`).to.have.property(\"L \");",
							"        pm.expect(stockBySizes, `Product ${index} should have size S`).to.have.property(\"S \");",
							"        ",
							"        // Verificar que las cantidades son números no negativos",
							"        Object.keys(stockBySizes).forEach(function(size) {",
							"            pm.expect(stockBySizes[size], `Product ${index} size ${size} should be non-negative number`)",
							"                .to.be.a(\"number\").and.to.be.at.least(0);",
							"        });",
							"        ",
							"        // Verificar que stockRatio está entre 0 y 1",
							"        pm.expect(product.stockRatio, `Product ${index} stockRatio should be between 0 and 1`)",
							"            .to.be.at.least(0).and.to.be.at.most(1);",
							"    });",
							"});",
							"",
							"pm.test(\"When stock weight is 1.0, products should be ordered by stock ratio\", function () {",
							"    const requestData = JSON.parse(pm.request.body.raw);",
							"    ",
							"    if (requestData.criteria.weights.stock_ratio === 1.0 && ",
							"        requestData.criteria.weights.sales_units === 0.0) {",
							"        ",
							"        const jsonData = pm.response.json();",
							"        const products = jsonData.products;",
							"        ",
							"        for (let i = 0; i < products.length - 1; i++) {",
							"            pm.expect(products[i].stockRatio, `Product ${i} should have higher stock ratio than product ${i+1}`)",
							"                .to.be.at.least(products[i + 1].stockRatio - 0.001);",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"criteria\": {\n    \"weights\": {\n      \"sales_units\": 0.0,\n      \"stock_ratio\": 1.0\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9090/v1/products/sort",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"v1",
						"products",
						"sort"
					]
				},
				"description": "Caso Test 1"
			},
			"response": []
		},
		{
			"name": "localhost:9090/v1/products/sort Case Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Error response has correct structure\", function () {",
							"    if (pm.response.code === 400) {",
							"        const jsonData = pm.response.json();",
							"        ",
							"        pm.expect(jsonData).to.have.property(\"code\");",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"        pm.expect(jsonData).to.have.property(\"timestamp\");",
							"        ",
							"        pm.expect(jsonData.code).to.be.oneOf([",
							"            \"INVALID_CRITERIA\",",
							"            \"MISSING_CRITERIA\", ",
							"            \"VALIDATION_ERROR\",",
							"            \"INVALID_JSON\"",
							"        ]);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"criteria\": {\n    \"weights\": {\n      \"sales_units\": 0.7,\n      \"stock_ratio\": -1\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9090/v1/products/sort",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"v1",
						"products",
						"sort"
					]
				},
				"description": "Caso Test 1"
			},
			"response": []
		}
	]
}