/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.product.manager.driving.controllers.api;

import com.product.manager.driving.controllers.models.Error;
import com.product.manager.driving.controllers.models.SortProductsRequest;
import com.product.manager.driving.controllers.models.SortProductsResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-04T09:53:31.625421774+02:00[Europe/Madrid]")
@Validated
@Tag(name = "Product Sorting", description = "API to sort products by different criteria")
public interface ProductSortingApi {

    /**
     * POST /v1/products/sort : Sort products by weighted criteria
     * Sorts products based on weighted criteria such as sales units and stock ratio. Returns products ordered by calculated score (highest to lowest).  **Supported Criteria:** - &#x60;sales_units&#x60;: Weight for sales performance (0.0 - 1.0) - &#x60;stock_ratio&#x60;: Weight for stock availability ratio (0.0 - 1.0)  **Future extensibility:** New criteria can be added without breaking the API. 
     *
     * @param sortProductsRequest  (required)
     * @return Products successfully sorted (status code 200)
     *         or Invalid sorting criteria (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "sortProducts",
        summary = "Sort products by weighted criteria",
        description = "Sorts products based on weighted criteria such as sales units and stock ratio. Returns products ordered by calculated score (highest to lowest).  **Supported Criteria:** - `sales_units`: Weight for sales performance (0.0 - 1.0) - `stock_ratio`: Weight for stock availability ratio (0.0 - 1.0)  **Future extensibility:** New criteria can be added without breaking the API. ",
        tags = { "Product Sorting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products successfully sorted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SortProductsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid sorting criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/products/sort",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<SortProductsResponse> sortProducts(
        @Parameter(name = "SortProductsRequest", description = "", required = true) @Valid @RequestBody SortProductsRequest sortProductsRequest
    );

}
